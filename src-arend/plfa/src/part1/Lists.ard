{-Agda-
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_; refl; sym; trans; cong)
open Eq.≡-Reasoning
open import Data.Bool using (Bool; true; false; T; _∧_; _∨_; not)
open import Data.Nat using (ℕ; zero; suc; _+_; _*_; _∸_; _≤_; s≤s; z≤n)
open import Data.Nat.Properties using
  (+-assoc; +-identityˡ; +-identityʳ; *-assoc; *-identityˡ; *-identityʳ)
open import Relation.Nullary using (¬_; Dec; yes; no)
open import Data.Product using (_×_; ∃; ∃-syntax) renaming (_,_ to ⟨_,_⟩)
open import Function using (_∘_)
open import Level using (Level)
open import plfa.part1.Isomorphism using (_≃_; _⇔_)
-Agda-}

\import Paths (inv, *>, pmap, ==<, >==, qed)
\import part1.Connectives (prod)
\import util.Paths (=<>=)
\import Data.Bool (Bool, true, false, So, and, or, not)
\open Nat (+, *)
\import Order.PartialOrder (<=)
\import Arith.Nat (-', NatSemiring, suc<=suc, zero<=_)
\import part1.Decidable (~?, Dec, yes, no)
\import util.Logic (~, &&)
\import Function (o)
\import util.Equiv (=~)
\import Logic (TruncP, absurd, inP, propExt, truncP)

{-Agda-
data List (A : Set) : Set where
  []  : List A
  _∷_ : A → List A → List A

infixr 5 _∷_
-Agda-}

\data List (A : \Type)
  | []
  | \infixr 5 :: A (List A)

{-Agda-
_ : List ℕ
_ = 0 ∷ 1 ∷ 2 ∷ []
-Agda-}

\func example-list : List Nat => 0 :: 1 :: 2 :: []

{-Agda-
data List′ : Set → Set where
  []′  : ∀ {A : Set} → List′ A
  _∷′_ : ∀ {A : Set} → A → List′ A → List′ A
-Agda-}

-- Same in Arend.

{-Agda-
_ : List ℕ
_ = _∷_ {ℕ} 0 (_∷_ {ℕ} 1 (_∷_ {ℕ} 2 ([] {ℕ})))
-Agda-}

\func example-list' : List Nat => (::) {Nat} 0 ((::) {Nat} 1 ((::) {Nat} 2 ([] {Nat})))

{-Agda-
pattern [_] z = z ∷ []
pattern [_,_] y z = y ∷ z ∷ []
pattern [_,_,_] x y z = x ∷ y ∷ z ∷ []
pattern [_,_,_,_] w x y z = w ∷ x ∷ y ∷ z ∷ []
pattern [_,_,_,_,_] v w x y z = v ∷ w ∷ x ∷ y ∷ z ∷ []
pattern [_,_,_,_,_,_] u v w x y z = u ∷ v ∷ w ∷ x ∷ y ∷ z ∷ []
-Agda-}

-- There is no such thing in Arend.

{-Agda-
infixr 5 _++_

_++_ : ∀ {A : Set} → List A → List A → List A
[]       ++ ys  =  ys
(x ∷ xs) ++ ys  =  x ∷ (xs ++ ys)
-Agda-}

\func \infixr 5 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | [] => ys
  | :: x xs => x :: (xs ++ ys)

{-Agda-
_ : [ 0 , 1 , 2 ] ++ [ 3 , 4 ] ≡ [ 0 , 1 , 2 , 3 , 4 ]
_ =
  begin
    0 ∷ 1 ∷ 2 ∷ [] ++ 3 ∷ 4 ∷ []
  ≡⟨⟩
    0 ∷ (1 ∷ 2 ∷ [] ++ 3 ∷ 4 ∷ [])
  ≡⟨⟩
    0 ∷ 1 ∷ (2 ∷ [] ++ 3 ∷ 4 ∷ [])
  ≡⟨⟩
    0 ∷ 1 ∷ 2 ∷ ([] ++ 3 ∷ 4 ∷ [])
  ≡⟨⟩
    0 ∷ 1 ∷ 2 ∷ 3 ∷ 4 ∷ []
  ∎
-Agda-}

\func example-append : 0 :: 1 :: 2 :: [] ++ 3 :: 4 :: [] = 0 :: 1 :: 2 :: 3 :: 4 :: [] =>
  0 :: 1 :: 2 :: [] ++ 3 :: 4 :: [] =<>=
  0 :: (1 :: 2 :: [] ++ 3 :: 4 :: []) =<>=
  0 :: 1 :: (2 :: [] ++ 3 :: 4 :: []) =<>=
  0 :: 1 :: 2 :: ([] ++ 3 :: 4 :: []) =<>=
  0 :: 1 :: 2 :: 3 :: 4 :: [] `qed

{-Agda-
++-assoc : ∀ {A : Set} (xs ys zs : List A)
  → (xs ++ ys) ++ zs ≡ xs ++ (ys ++ zs)
++-assoc [] ys zs =
  begin
    ([] ++ ys) ++ zs
  ≡⟨⟩
    ys ++ zs
  ≡⟨⟩
    [] ++ (ys ++ zs)
  ∎
++-assoc (x ∷ xs) ys zs =
  begin
    (x ∷ xs ++ ys) ++ zs
  ≡⟨⟩
    x ∷ (xs ++ ys) ++ zs
  ≡⟨⟩
    x ∷ ((xs ++ ys) ++ zs)
  ≡⟨ cong (x ∷_) (++-assoc xs ys zs) ⟩
    x ∷ (xs ++ (ys ++ zs))
  ≡⟨⟩
    x ∷ xs ++ (ys ++ zs)
  ∎
-Agda-}

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | [] =>
    ([] ++ ys) ++ zs =<>=
    ys ++ zs =<>=
    [] ++ (ys ++ zs) `qed
  | :: x xs =>
    (x :: xs ++ ys) ++ zs =<>=
    x :: (xs ++ ys) ++ zs =<>=
    x :: ((xs ++ ys) ++ zs) ==< pmap (x ::) (++-assoc xs ys zs) >==
    x :: xs ++ (ys ++ zs) `qed

{-Agda-
++-identityˡ : ∀ {A : Set} (xs : List A) → [] ++ xs ≡ xs
++-identityˡ xs =
  begin
    [] ++ xs
  ≡⟨⟩
    xs
  ∎
-Agda-}

\func ++-identity-l {A : \Type} (xs : List A) : [] ++ xs = xs =>
  [] ++ xs =<>= xs `qed

{-Agda-
++-identityʳ : ∀ {A : Set} (xs : List A) → xs ++ [] ≡ xs
++-identityʳ [] =
  begin
    [] ++ []
  ≡⟨⟩
    []
  ∎
++-identityʳ (x ∷ xs) =
  begin
    (x ∷ xs) ++ []
  ≡⟨⟩
    x ∷ (xs ++ [])
  ≡⟨ cong (x ∷_) (++-identityʳ xs) ⟩
    x ∷ xs
  ∎
-Agda-}

\func ++-identity-r {A : \Type} (xs : List A) : xs ++ [] = xs
  | [] => [] ++ [] =<>= [] `qed
  | :: x xs =>
    (x :: xs) ++ [] =<>=
    x :: (xs ++ []) ==< pmap (x ::) (++-identity-r xs) >==
    x :: xs `qed

{-Agda-
length : ∀ {A : Set} → List A → ℕ
length []        =  zero
length (x ∷ xs)  =  suc (length xs)
-Agda-}

\func length {A : \Type} (_ : List A) : Nat
  | [] => 0
  | :: x xs => suc (length xs)

{-Agda-
_ : length [ 0 , 1 , 2 ] ≡ 3
_ =
  begin
    length (0 ∷ 1 ∷ 2 ∷ [])
  ≡⟨⟩
    suc (length (1 ∷ 2 ∷ []))
  ≡⟨⟩
    suc (suc (length (2 ∷ [])))
  ≡⟨⟩
    suc (suc (suc (length {ℕ} [])))
  ≡⟨⟩
    suc (suc (suc zero))
  ∎
-Agda-}

\func example-length : length (0 :: 1 :: 2 :: []) = 3 =>
  length (0 :: 1 :: 2 :: []) =<>=
  suc (length (1 :: 2 :: [])) =<>=
  suc (suc (length (2 :: []))) =<>=
  suc (suc (suc (length {Nat} []))) =<>=
  suc (suc (suc 0)) `qed

{-Agda-
length-++ : ∀ {A : Set} (xs ys : List A)
  → length (xs ++ ys) ≡ length xs + length ys
length-++ {A} [] ys =
  begin
    length ([] ++ ys)
  ≡⟨⟩
    length ys
  ≡⟨⟩
    length {A} [] + length ys
  ∎
length-++ (x ∷ xs) ys =
  begin
    length ((x ∷ xs) ++ ys)
  ≡⟨⟩
    suc (length (xs ++ ys))
  ≡⟨ cong suc (length-++ xs ys) ⟩
    suc (length xs + length ys)
  ≡⟨⟩
    length (x ∷ xs) + length ys
  ∎
-Agda-}

\func length-++ {A : \Type} (xs ys : List A) : length (xs ++ ys) = length xs + length ys \elim xs
  | [] =>
    length ([] ++ ys) =<>=
    length ys =<>=
    (length {Nat} []) + length ys `qed
  | :: x xs =>
    length ((x :: xs) ++ ys) =<>=
    suc (length (xs ++ ys)) ==< pmap suc (length-++ xs ys) >==
    suc (length xs + length ys) =<>=
    length (x :: xs) + length ys `qed

{-Agda-
reverse : ∀ {A : Set} → List A → List A
reverse []        =  []
reverse (x ∷ xs)  =  reverse xs ++ [ x ]
-Agda-}

\func reverse {A : \Type} (_ : List A) : List A
  | [] => []
  | :: x xs => reverse xs ++ x :: []

{-Agda-
_ : reverse [ 0 , 1 , 2 ] ≡ [ 2 , 1 , 0 ]
_ =
  begin
    reverse (0 ∷ 1 ∷ 2 ∷ [])
  ≡⟨⟩
    reverse (1 ∷ 2 ∷ []) ++ [ 0 ]
  ≡⟨⟩
    (reverse (2 ∷ []) ++ [ 1 ]) ++ [ 0 ]
  ≡⟨⟩
    ((reverse [] ++ [ 2 ]) ++ [ 1 ]) ++ [ 0 ]
  ≡⟨⟩
    (([] ++ [ 2 ]) ++ [ 1 ]) ++ [ 0 ]
  ≡⟨⟩
    (([] ++ 2 ∷ []) ++ 1 ∷ []) ++ 0 ∷ []
  ≡⟨⟩
    (2 ∷ [] ++ 1 ∷ []) ++ 0 ∷ []
  ≡⟨⟩
    2 ∷ ([] ++ 1 ∷ []) ++ 0 ∷ []
  ≡⟨⟩
    (2 ∷ 1 ∷ []) ++ 0 ∷ []
  ≡⟨⟩
    2 ∷ (1 ∷ [] ++ 0 ∷ [])
  ≡⟨⟩
    2 ∷ 1 ∷ ([] ++ 0 ∷ [])
  ≡⟨⟩
    2 ∷ 1 ∷ 0 ∷ []
  ≡⟨⟩
    [ 2 , 1 , 0 ]
  ∎
-Agda-}

\func example-reverse : reverse (0 :: 1 :: 2 :: []) = 2 :: 1 :: 0 :: [] =>
  reverse (0 :: 1 :: 2 :: []) =<>=
  reverse (1 :: 2 :: []) ++ 0 :: [] =<>=
  (reverse (2 :: []) ++ 1 :: []) ++ 0 :: [] =<>=
  ((reverse [] ++ 2 :: []) ++ 1 :: []) ++ 0 :: [] =<>=
  (([] ++ 2 :: []) ++ 1 :: []) ++ 0 :: [] =<>=
  (([] ++ 2 :: []) ++ 1 :: []) ++ 0 :: [] =<>=
  (2 :: [] ++ 1 :: []) ++ 0 :: [] =<>=
  2 :: ([] ++ 1 :: []) ++ 0 :: [] =<>=
  (2 :: 1 :: []) ++ 0 :: [] =<>=
  2 :: (1 :: [] ++ 0 :: []) =<>=
  2 :: 1 :: ([] ++ 0 :: []) =<>=
  2 :: 1 :: 0 :: [] =<>=
  2 :: 1 :: 0 :: [] `qed

\import Paths.Meta (rewrite)
\import Meta (later)

\func reverse-++-distrib {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | [] => rewrite (++-identity-r (reverse ys)) idp
  | :: x xs =>
    reverse (xs ++ ys) ++ x :: [] ==< later rewrite (reverse-++-distrib xs ys) idp >==
    (reverse ys ++ reverse xs) ++ x :: [] ==< ++-assoc _ _ _ >==
    reverse ys ++ reverse xs ++ x :: [] `qed

\func reverse-involutive {A : \Type} (xs : List A)  : reverse (reverse xs) = xs
  | [] => idp
  | :: x xs =>
    reverse (reverse xs ++ x :: []) ==< reverse-++-distrib _ _ >==
    reverse (x :: []) ++ reverse (reverse xs) =<>=
    x :: reverse (reverse xs) ==< later rewrite (reverse-involutive _) idp >==
    x :: xs `qed

{-Agda-
shunt : ∀ {A : Set} → List A → List A → List A
shunt []       ys  =  ys
shunt (x ∷ xs) ys  =  shunt xs (x ∷ ys)
-Agda-}

\func shunt {A : \Type} (xs ys : List A) : List A \elim xs
  | [] => ys
  | :: x xs => shunt xs (x :: ys)

{-Agda-
shunt-reverse : ∀ {A : Set} (xs ys : List A)
  → shunt xs ys ≡ reverse xs ++ ys
shunt-reverse [] ys =
  begin
    shunt [] ys
  ≡⟨⟩
    ys
  ≡⟨⟩
    reverse [] ++ ys
  ∎
shunt-reverse (x ∷ xs) ys =
  begin
    shunt (x ∷ xs) ys
  ≡⟨⟩
    shunt xs (x ∷ ys)
  ≡⟨ shunt-reverse xs (x ∷ ys) ⟩
    reverse xs ++ (x ∷ ys)
  ≡⟨⟩
    reverse xs ++ ([ x ] ++ ys)
  ≡⟨ sym (++-assoc (reverse xs) [ x ] ys) ⟩
    (reverse xs ++ [ x ]) ++ ys
  ≡⟨⟩
    reverse (x ∷ xs) ++ ys
  ∎
-Agda-}

\func shunt-reverse {A : \Type} (xs ys : List A) : shunt xs ys = reverse xs ++ ys \elim xs
  | [] =>
    shunt [] ys =<>=
    ys =<>=
    reverse [] ++ ys `qed
  | :: x xs =>
    shunt (x :: xs) ys =<>=
    shunt xs (x :: ys) ==< shunt-reverse _ _ >==
    reverse xs ++ (x :: ys) =<>=
    reverse xs ++ (x :: [] ++ ys) ==< inv (++-assoc _ _ _) >==
    (reverse xs ++ x :: []) ++ ys =<>=
    reverse (x :: xs) ++ ys `qed

{-Agda-
reverse′ : ∀ {A : Set} → List A → List A
reverse′ xs = shunt xs []
-Agda-}

\func reverse' {A : \Type} (xs : List A) : List A => shunt xs []

{-Agda-
reverses : ∀ {A : Set} (xs : List A)
  → reverse′ xs ≡ reverse xs
reverses xs =
  begin
    reverse′ xs
  ≡⟨⟩
    shunt xs []
  ≡⟨ shunt-reverse xs [] ⟩
    reverse xs ++ []
  ≡⟨ ++-identityʳ (reverse xs) ⟩
    reverse xs
  ∎
-Agda-}

\func reverses {A : \Type} (xs : List A) : reverse' xs = reverse xs =>
  reverse' xs =<>=
  shunt xs [] ==< shunt-reverse xs [] >==
  reverse xs ++ [] ==< ++-identity-r _ >==
  reverse xs `qed

{-Agda-
_ : reverse′ [ 0 , 1 , 2 ] ≡ [ 2 , 1 , 0 ]
_ =
  begin
    reverse′ (0 ∷ 1 ∷ 2 ∷ [])
  ≡⟨⟩
    shunt (0 ∷ 1 ∷ 2 ∷ []) []
  ≡⟨⟩
    shunt (1 ∷ 2 ∷ []) (0 ∷ [])
  ≡⟨⟩
    shunt (2 ∷ []) (1 ∷ 0 ∷ [])
  ≡⟨⟩
    shunt [] (2 ∷ 1 ∷ 0 ∷ [])
  ≡⟨⟩
    2 ∷ 1 ∷ 0 ∷ []
  ∎
-Agda-}

\func example-reverse' : reverse' (0 :: 1 :: 2 :: []) = 2 :: 1 :: 0 :: [] =>
  reverse' (0 :: 1 :: 2 :: []) =<>=
  shunt (0 :: 1 :: 2 :: []) [] =<>=
  shunt (1 :: 2 :: []) (0 :: []) =<>=
  shunt (2 :: []) (1 :: 0 :: []) =<>=
  shunt [] (2 :: 1 :: 0 :: []) =<>=
  2 :: 1 :: 0 :: [] `qed

{-Agda-
map : ∀ {A B : Set} → (A → B) → List A → List B
map f []        =  []
map f (x ∷ xs)  =  f x ∷ map f xs
-Agda-}

\func map {A B : \Type} (f : A -> B) (xs : List A) : List B \elim xs
  | [] => []
  | :: x xs => f x :: map f xs

{-Agda-
_ : map suc [ 0 , 1 , 2 ] ≡ [ 1 , 2 , 3 ]
_ =
  begin
    map suc (0 ∷ 1 ∷ 2 ∷ [])
  ≡⟨⟩
    suc 0 ∷ map suc (1 ∷ 2 ∷ [])
  ≡⟨⟩
    suc 0 ∷ suc 1 ∷ map suc (2 ∷ [])
  ≡⟨⟩
    suc 0 ∷ suc 1 ∷ suc 2 ∷ map suc []
  ≡⟨⟩
    suc 0 ∷ suc 1 ∷ suc 2 ∷ []
  ≡⟨⟩
    1 ∷ 2 ∷ 3 ∷ []
  ∎
-Agda-}

\func example-map-suc : map suc (0 :: 1 :: 2 :: []) = 1 :: 2 :: 3 :: [] =>
  map suc (0 :: 1 :: 2 :: []) =<>=
  suc 0 :: map suc (1 :: 2 :: []) =<>=
  suc 0 :: suc 1 :: map suc (2 :: []) =<>=
  suc 0 :: suc 1 :: suc 2 :: map suc [] =<>=
  suc 0 :: suc 1 :: suc 2 :: [] =<>=
  1 :: 2 :: 3 :: [] `qed

{-Agda-
sucs : List ℕ → List ℕ
sucs = map suc

_ : sucs [ 0 , 1 , 2 ] ≡ [ 1 , 2 , 3 ]
_ =
  begin
    sucs [ 0 , 1 , 2 ]
  ≡⟨⟩
    map suc [ 0 , 1 , 2 ]
  ≡⟨⟩
    [ 1 , 2 , 3 ]
  ∎
-Agda-}

\func sucs => map suc

\func example-sucs : sucs (0 :: 1 :: 2 :: []) = 1 :: 2 :: 3 :: [] =>
  sucs (0 :: 1 :: 2 :: []) =<>=
  map suc (0 :: 1 :: 2 :: []) =<>=
  1 :: 2 :: 3 :: [] `qed

{-Agda-
-- Your code goes here
-Agda-}

\import util.Function (extensionality)

\func map-compose {A B C : \Type} (f : A -> B) (g : B -> C) : map (g o f) = map g o map f =>
  extensionality {_} {_} {map (g o f)} {map g o map f} (lemma1 _ _ __)
  \where {
    \func lemma1 {A B C : \Type} (f : A -> B) (g : B -> C) (xs : List A) : map (g o f) xs = (map g o map f) xs \elim xs
      | [] => idp
      | :: x xs =>
        (g o f) x :: map (g o f) xs ==< later rewrite lemma1 idp >==
        (g o f) x :: (map g o map f) xs =<>=
        map g (f x :: map f xs) =<>=
        map g ((map f) (x :: xs)) =<>=
        (map g o map f) (x :: xs) `qed
  }

{-Agda-
-- Your code goes here
-Agda-}

\func map-++-distribute {A B : \Type} (f : A -> B) (xs ys : List A) : map f (xs ++ ys) = map f xs ++ map f ys \elim xs
  | [] => idp
  | :: x xs => pmap (f x ::) (map-++-distribute _ _ _)

{-Agda-
data Tree (A B : Set) : Set where
  leaf : A → Tree A B
  node : Tree A B → B → Tree A B → Tree A B
-Agda-}

\data Tree (A B : \Type)
  | leaf A
  | node (Tree A B) B (Tree A B)

{-Agda-
-- Your code goes here
-Agda-}

\func map-Tree {A B C D : \Type} (f : A -> C) (g : B -> D) (tr : Tree A B) : Tree C D \elim tr
  | leaf a => leaf (f a)
  | node tr1 b tr2 => node (map-Tree f g tr1) (g b) (map-Tree f g tr2)

{-Agda-
foldr : ∀ {A B : Set} → (A → B → B) → B → List A → B
foldr _⊗_ e []        =  e
foldr _⊗_ e (x ∷ xs)  =  x ⊗ foldr _⊗_ e xs
-Agda-}

\func foldr {A B : \Type} (** : A -> B -> B) (e : B) (xs : List A) : B \elim xs
  | [] => e
  | :: x xs => x `**` foldr ** e xs

{-Agda-
_ : foldr _+_ 0 [ 1 , 2 , 3 , 4 ] ≡ 10
_ =
  begin
    foldr _+_ 0 (1 ∷ 2 ∷ 3 ∷ 4 ∷ [])
  ≡⟨⟩
    1 + foldr _+_ 0 (2 ∷ 3 ∷ 4 ∷ [])
  ≡⟨⟩
    1 + (2 + foldr _+_ 0 (3 ∷ 4 ∷ []))
  ≡⟨⟩
    1 + (2 + (3 + foldr _+_ 0 (4 ∷ [])))
  ≡⟨⟩
    1 + (2 + (3 + (4 + foldr _+_ 0 [])))
  ≡⟨⟩
    1 + (2 + (3 + (4 + 0)))
  ∎
-Agda-}

\func example-foldr : foldr (+) 0 (1 :: 2 :: 3 :: 4 :: []) = 10 =>
  foldr (+) 0 (1 :: 2 :: 3 :: 4 :: []) =<>=
  1 + foldr (+) 0 (2 :: 3 :: 4 :: []) =<>=
  1 + (2 + foldr (+) 0 (3 :: 4 :: [])) =<>=
  1 + (2 + (3 + foldr (+) 0 (4 :: []))) =<>=
  1 + (2 + (3 + (4 + foldr (+) 0 []))) =<>=
  1 + (2 + (3 + (4 + 0))) `qed

{-Agda-
sum : List ℕ → ℕ
sum = foldr _+_ 0

_ : sum [ 1 , 2 , 3 , 4 ] ≡ 10
_ =
  begin
    sum [ 1 , 2 , 3 , 4 ]
  ≡⟨⟩
    foldr _+_ 0 [ 1 , 2 , 3 , 4 ]
  ≡⟨⟩
    10
  ∎
-Agda-}

\func sum : List Nat -> Nat => foldr (+) 0

\func example-sum : sum (1 :: 2 :: 3 :: 4 :: []) = 10 =>
  sum (1 :: 2 :: 3 :: 4 :: []) =<>=
  foldr (+) 0 (1 :: 2 :: 3 :: 4 :: []) =<>=
  10 `qed

{-Agda-
-- Your code goes here
-Agda-}

\func product : List Nat -> Nat => foldr (*) 1

{-Agda-
-- Your code goes here
-Agda-}

\func foldr-++ {A B : \Type} (** : A -> B -> B) (e : B) (xs ys : List A)
  : foldr ** e (xs ++ ys) = foldr ** (foldr ** e ys) xs \elim xs
  | [] => idp
  | :: x xs => pmap (x `**`) (foldr-++ _ _ _ _)

{-Agda-
-- Your code goes here
-Agda-}

\func foldr-:: {A : \Type} (xs ys : List A) : xs ++ ys = foldr (::) ys xs \elim xs
  | [] => idp
  | :: x xs => pmap (x `::`) (foldr-:: _ _)

{-Agda-
-- Your code goes here
-Agda-}

\func map-is-foldr {A B : \Type} (f : A -> B) (xs : List A) : map f = foldr (\lam x xs => f x :: xs) [] =>
  extensionality (lemma _ xs __)
  \where {
    \func lemma {A B : \Type} (f : A -> B) (xs : List A) (ys : List A)
      : map f ys = (foldr (\lam x xs => f x :: xs) []) ys \elim ys
      | [] => idp
      | :: y ys => pmap (f y ::) (lemma _ xs _)
  }

{-Agda-
-- Your code goes here
-Agda-}

\func fold-Tree {A B C : \Type} (f : A -> C) (g : C -> B -> C -> C) (tr : Tree A B) : C \elim tr
  | leaf a => f a
  | node tr1 b tr2 => g (fold-Tree f g tr1) b (fold-Tree f g tr2)

{-Agda-
-- Your code goes here
-Agda-}

\import Paths (pmap2)

\func map-is-foldr-Tree {A B C D : \Type} (f : A -> C) (g : B -> D)
  : map-Tree f g = fold-Tree (\lam a => leaf (f a)) (\lam tr1 b tr2 => node tr1 (g b) tr2) =>
  extensionality (lemma _ _)
  \where {
    \func lemma {A B C D : \Type} (f : A -> C) (g : B -> D) (tr : Tree A B)
      : map-Tree f g tr = fold-Tree (\lam a => leaf (f a)) (\lam tr1 b tr2 => node tr1 (g b) tr2) tr \elim tr
      | leaf a => idp
      | node tr1 b tr2 => pmap2 (\lam tr1 tr2 => node tr1 (g b) tr2) (lemma _ _ _) (lemma _ _ _)
  }

{-Agda-
downFrom : ℕ → List ℕ
downFrom zero     =  []
downFrom (suc n)  =  n ∷ downFrom n
-Agda-}

\func downFrom (_ : Nat) : List Nat
  | 0 => []
  | suc n => n :: downFrom n

{-Agda-
_ : downFrom 3 ≡ [ 2 , 1 , 0 ]
_ = refl
-Agda-}

\func example-downFrom : downFrom 3 = 2 :: 1 :: 0 :: [] => idp

\import part1.Induction (-'+assoc)
\open -'+assoc ([n-'0=n])
\import Function.Meta ($)
\import Arith.Nat (-'id)

\func sum-downFrom (n : Nat) : sum (downFrom n) * 2 = n * (n -' 1)
  | 0 => idp
  | suc n =>
    (n + sum (downFrom n)) + (n + sum (downFrom n)) =<>=
    (n + sum (downFrom n)) * 2 ==< NatSemiring.rdistr {n} {_} {2} >==
    n * 2 + sum (downFrom n) * 2 ==< pmap (n * 2 +) (sum-downFrom n) >==
    n * 2 + n * (n -' 1) ==< pmap (n * 2 +) NatSemiring.*-comm >==
    n * 2 + (n -' 1) * n ==< lemma >==
    suc n * n ==< pmap (suc n *) (inv $ [n-'0=n] _) >==
    suc n * (n -' 0) `qed
  \where {
    \func lemma {n : Nat} : n + n + (n -' 1) * n = (n + 1) * n
      | {0} => idp
      | {suc n} =>
        n + n + ((n -' 0) * n + (n -' 0)) + 2 ==< later rewrite ([n-'0=n] n) idp >==
        n + n + (n * n + (n -' 0)) + 2 ==< later rewrite ([n-'0=n] n) idp >==
        -- TODO can we have a meta that applies comm and assoc until equation is solved?
        (n + n) + (n * n + n) + 2 ==< later rewrite (inv NatSemiring.+-assoc) idp >==
        ((n + n) + n * n) + n + 2 ==< later rewrite (NatSemiring.+-comm {n + n} {n * n}) idp >==
        (n * n + n * 2) + n + 2 ==< later rewrite (NatSemiring.*-comm {n} {2} : n * 2 = 2 * n) idp >==
        (n * n + 2 * n) + n + 2 ==< later rewrite (inv NatSemiring.rdistr) idp >==
        (n + 2) * n + n + 2 `qed
  }

{-Agda-
record IsMonoid {A : Set} (_⊗_ : A → A → A) (e : A) : Set where
  field
    assoc : ∀ (x y z : A) → (x ⊗ y) ⊗ z ≡ x ⊗ (y ⊗ z)
    identityˡ : ∀ (x : A) → e ⊗ x ≡ x
    identityʳ : ∀ (x : A) → x ⊗ e ≡ x

open IsMonoid
-Agda-}

\class IsMonoid (A : \Type)
  | \infixl 7 ** \alias \infixl 7 ⊗ : A -> A -> A
  | e : A
  | assoc (x y z : A) : (x ⊗ y) ** z = x ⊗ (y ⊗ z)
  | identity-left (x : A) : e ⊗ x = x
  | identity-right (x : A) : x ⊗ e = x

{-Agda-
+-monoid : IsMonoid _+_ 0
+-monoid =
  record
    { assoc = +-assoc
    ; identityˡ = +-identityˡ
    ; identityʳ = +-identityʳ
    }

*-monoid : IsMonoid _*_ 1
*-monoid =
  record
    { assoc = *-assoc
    ; identityˡ = *-identityˡ
    ; identityʳ = *-identityʳ
    }

++-monoid : ∀ {A : Set} → IsMonoid {List A} _++_ []
++-monoid =
  record
    { assoc = ++-assoc
    ; identityˡ = ++-identityˡ
    ; identityʳ = ++-identityʳ
    }
-Agda-}

\func +-monoid : IsMonoid _ (+) 0 \cowith
  | assoc => NatSemiring.+-assoc {__} {__} {__}
  | identity-left => NatSemiring.zro-left {__}
  | identity-right => NatSemiring.zro-right {__}

\func *-monoid : IsMonoid _ (*) 1 \cowith
  | assoc => NatSemiring.*-assoc {__} {__} {__}
  | identity-left => NatSemiring.ide-left {__}
  | identity-right => NatSemiring.ide-right {__}

\func ++-monoid {A : \Type} : IsMonoid (List A) (++) [] \cowith
  | assoc => ++-assoc
  | identity-left => ++-identity-l
  | identity-right => ++-identity-r

{-Agda-
foldr-monoid : ∀ {A : Set} (_⊗_ : A → A → A) (e : A) → IsMonoid _⊗_ e →
  ∀ (xs : List A) (y : A) → foldr _⊗_ y xs ≡ foldr _⊗_ e xs ⊗ y
foldr-monoid _⊗_ e ⊗-monoid [] y =
  begin
    foldr _⊗_ y []
  ≡⟨⟩
    y
  ≡⟨ sym (identityˡ ⊗-monoid y) ⟩
    (e ⊗ y)
  ≡⟨⟩
    foldr _⊗_ e [] ⊗ y
  ∎
foldr-monoid _⊗_ e ⊗-monoid (x ∷ xs) y =
  begin
    foldr _⊗_ y (x ∷ xs)
  ≡⟨⟩
    x ⊗ (foldr _⊗_ y xs)
  ≡⟨ cong (x ⊗_) (foldr-monoid _⊗_ e ⊗-monoid xs y) ⟩
    x ⊗ (foldr _⊗_ e xs ⊗ y)
  ≡⟨ sym (assoc ⊗-monoid x (foldr _⊗_ e xs) y) ⟩
    (x ⊗ foldr _⊗_ e xs) ⊗ y
  ≡⟨⟩
    foldr _⊗_ e (x ∷ xs) ⊗ y
  ∎
-Agda-}

\func foldr-monoid {M : IsMonoid} (xs : List M) (y : M) : foldr (⊗) y xs = foldr (⊗) e xs `⊗` y \elim xs
  | [] =>
    foldr (⊗) y [] =<>=
    y ==< inv (identity-left y) >==
    e ⊗ y =<>=
    foldr (⊗) e [] ⊗ y `qed
  | :: x xs =>
    foldr (⊗) y (x :: xs) =<>=
    x ⊗ (foldr (⊗) y xs) ==< pmap (x ⊗) (foldr-monoid xs y) >==
    x ⊗ (foldr (⊗) e xs ⊗ y) ==< inv (assoc x (foldr (⊗) e xs) y) >==
    (x ⊗ foldr (⊗) e xs) ⊗ y =<>=
    foldr (⊗) e (x :: xs) ⊗ y `qed

{-Agda-
foldr-monoid-++ : ∀ {A : Set} (_⊗_ : A → A → A) (e : A) → IsMonoid _⊗_ e →
  ∀ (xs ys : List A) → foldr _⊗_ e (xs ++ ys) ≡ foldr _⊗_ e xs ⊗ foldr _⊗_ e ys
foldr-monoid-++ _⊗_ e monoid-⊗ xs ys =
  begin
    foldr _⊗_ e (xs ++ ys)
  ≡⟨ foldr-++ _⊗_ e xs ys ⟩
    foldr _⊗_ (foldr _⊗_ e ys) xs
  ≡⟨ foldr-monoid _⊗_ e monoid-⊗ xs (foldr _⊗_ e ys) ⟩
    foldr _⊗_ e xs ⊗ foldr _⊗_ e ys
  ∎
-Agda-}

\func foldr-monoid-++ {M : IsMonoid} (xs ys : List M) : foldr (⊗) e (xs ++ ys) = foldr (⊗) e xs ⊗ foldr (⊗) e ys =>
  foldr (⊗) e (xs ++ ys) ==< foldr-++ (⊗) e xs ys >==
  foldr (⊗) (foldr (⊗) e ys) xs ==< foldr-monoid xs (foldr (⊗) e ys) >==
  foldr (⊗) e xs ⊗ foldr (⊗) e ys `qed

{-Agda-
-- Your code goes here
-Agda-}

\func foldl {A B : \Type} (** : B -> A -> B) (e : B) (xs : List A) : B \elim xs
  | [] => e
  | :: x xs => foldl (**) (e `**` x) xs

\func example-foldl : foldl (+) 0 (1 :: 2 :: 3 :: 4 :: []) = 10 =>
  foldl (+) 0 (1 :: 2 :: 3 :: 4 :: []) =<>=
  foldl (+) (0 + 1) (2 :: 3 :: 4 :: []) =<>=
  foldl (+) ((0 + 1) + 2) (3 :: 4 :: []) =<>=
  foldl (+) (((0 + 1) + 2) + 3) (4 :: []) =<>=
  foldl (+) ((((0 + 1) + 2) + 3) + 4) [] =<>=
  (((0 + 1) + 2) + 3) + 4 `qed

{-Agda-
-- Your code goes here
-Agda-}

\func foldr-monoid-foldl {M : IsMonoid} (xs : List M) : foldr (⊗) e xs = foldl (⊗) e xs
  | [] => idp
  | :: x xs =>
    x ⊗ foldr (⊗) e xs ==< pmap (x ⊗) (foldr-monoid-foldl xs) >==
    x ⊗ foldl (⊗) e xs ==< inv (foldl-monoid xs x) >==
    foldl (⊗) x xs ==< later rewrite {1} (inv (identity-left x)) idp >==
    foldl (⊗) (e ⊗ x) xs `qed
  \where {
    \func foldl-monoid {M : IsMonoid} (xs : List M) (y : M) : foldl (**) y xs = y ** foldl (**) e xs \elim xs
      | [] => inv $ identity-right y
      | :: x xs =>
        foldl (⊗) (y ⊗ x) xs ==< foldl-monoid _ _ >==
        (y ⊗ x) ⊗ foldl (⊗) e xs ==< assoc y x _ >==
        y ⊗ (x ⊗ foldl (⊗) e xs) ==< pmap (y ⊗) (inv $ foldl-monoid _ _) >==
        y ⊗ foldl (⊗) x xs ==< later rewrite {1} (inv $ identity-left x) idp >==
        y ⊗ foldl (⊗) (e ⊗ x) xs `qed
  }

{-Agda-
data All {A : Set} (P : A → Set) : List A → Set where
  []  : All P []
  _∷_ : ∀ {x : A} {xs : List A} → P x → All P xs → All P (x ∷ xs)
-Agda-}

\data All {A : \Type} (P : A -> \Prop) (xs : List A) \elim xs
  | [] => []all \alias []∃
  | :: x xs => \infixr 7 ::all \alias \infixr 7 ::∀ (P x) (All P xs)

{-Agda-
_ : All (_≤ 2) [ 0 , 1 , 2 ]
_ = z≤n ∷ s≤s z≤n ∷ s≤s (s≤s z≤n) ∷ []
-Agda-}

\func example-all : All (__ <= 2) (0 :: 1 :: 2 :: []) =>
  zero<=_ ::∀ suc<=suc zero<=_ ::∀ suc<=suc (suc<=suc zero<=_) ::∀ []∃

{-Agda-
data Any {A : Set} (P : A → Set) : List A → Set where
  here  : ∀ {x : A} {xs : List A} → P x → Any P (x ∷ xs)
  there : ∀ {x : A} {xs : List A} → Any P xs → Any P (x ∷ xs)
-Agda-}

\truncated \data Any {A : \Type} (P : A -> \Prop) (xs : List A) : \Prop \elim xs
  | :: x xs => here (P x)
  | :: x xs => there (Any P xs)

{-Agda-
infix 4 _∈_ _∉_

_∈_ : ∀ {A : Set} (x : A) (xs : List A) → Set
x ∈ xs = Any (x ≡_) xs

_∉_ : ∀ {A : Set} (x : A) (xs : List A) → Set
x ∉ xs = ¬ (x ∈ xs)
-Agda-}

\func in-list \alias \infix 4 ∈ {A : \Type} (x : A) (xs : List A) : \Prop => Any (\lam a => TruncP (x = a)) xs

\func not-in-list \alias \infix 4 ∉ {A : \Type} (x : A) (xs : List A) : \Prop => ~ (x ∈ xs)

{-Agda-
_ : 0 ∈ [ 0 , 1 , 0 , 2 ]
_ = here refl

_ : 0 ∈ [ 0 , 1 , 0 , 2 ]
_ = there (there (here refl))
-Agda-}

\func example-in-list1 : 0 ∈ (0 :: 1 :: 0 :: 2 :: []) => here (inP idp)

\func example-in-list2 : 0 ∈ (0 :: 1 :: 0 :: 2 :: []) => there (there (here (inP idp)))

{-Agda-
not-in : 3 ∉ [ 0 , 1 , 0 , 2 ]
not-in (here ())
not-in (there (here ()))
not-in (there (there (here ())))
not-in (there (there (there (here ()))))
not-in (there (there (there (there ()))))
-Agda-}

\func example-not-in-list : 3 ∉ (0 :: 1 :: 0 :: 2 :: []) => \lam p => \case p \with {
  | here (inP ())
  | there (here (inP ()))
  | there (there (here (inP ())))
  | there (there (there (here (inP ()))))
  | there (there (there (there ())))
}

{-Agda-
All-++-⇔ : ∀ {A : Set} {P : A → Set} (xs ys : List A) →
  All P (xs ++ ys) ⇔ (All P xs × All P ys)
All-++-⇔ xs ys =
  record
    { to       =  to xs ys
    ; from     =  from xs ys
    }
  where

  to : ∀ {A : Set} {P : A → Set} (xs ys : List A) →
    All P (xs ++ ys) → (All P xs × All P ys)
  to [] ys Pys = ⟨ [] , Pys ⟩
  to (x ∷ xs) ys (Px ∷ Pxs++ys) with to xs ys Pxs++ys
  ... | ⟨ Pxs , Pys ⟩ = ⟨ Px ∷ Pxs , Pys ⟩

  from : ∀ { A : Set} {P : A → Set} (xs ys : List A) →
    All P xs × All P ys → All P (xs ++ ys)
  from [] ys ⟨ [] , Pys ⟩ = Pys
  from (x ∷ xs) ys ⟨ Px ∷ Pxs , Pys ⟩ =  Px ∷ from xs ys ⟨ Pxs , Pys ⟩
-Agda-}

\func All-++-= {A : \Type} {P : A -> \Prop} (xs ys : List A) : All P (xs ++ ys) = All P xs && All P ys =>
  propExt ([=>] xs ys) ([<=] xs ys)
  \where {
    \func [=>] {A : \Type} {P : A -> \Prop} (xs ys : List A) (all : All P (xs ++ ys)) : All P xs && All P ys \elim xs, all
      | [], Pys => prod []∃ Pys
      | :: x xs, ::∀ Px Pxs++ys => \case [=>] xs ys Pxs++ys \with {
        | prod Pxs Pys => prod (Px ::∀ Pxs) Pys
      }

    \func [<=] {A : \Type} {P : A -> \Prop} (xs ys : List A) (both : All P xs && All P ys) : All P (xs ++ ys) \elim xs, both
      | [], prod []∃ Pys => Pys
      | :: x xs, prod (::∀ Px Pxs) Pys => Px ::∀ [<=] xs ys (prod Pxs Pys)
  }

{-Agda-
-- Your code goes here
-Agda-}

\import Logic (||, byLeft, byRight)

\func Any-++-= {A : \Type} {P : A -> \Prop} (xs ys : List A) : Any P (xs ++ ys) = Any P xs || Any P ys =>
  propExt ([=>] xs ys) ([<=] xs ys)
  \where {
    \func [=>] {A : \Type} {P : A -> \Prop} (xs ys : List A) (any : Any P (xs ++ ys)) : Any P xs || Any P ys \elim xs, any
      | [], Pys => byRight Pys
      | :: _ xs, here Px => byLeft (here Px)
      | :: _ xs, there any => \case [=>] xs ys any \with {
        | byLeft Pxs => byLeft (there Pxs)
        | byRight Pys => byRight Pys
      }

    \func [<=] {A : \Type} {P : A -> \Prop} (xs ys : List A) (or : Any P xs || Any P ys) : Any P (xs ++ ys) \elim xs, or
      | [], byLeft ()
      | [], byRight Pys => Pys
      | :: _ xs, byLeft (here Px) => here Px
      | :: _ xs, byLeft (there Pxs) => there ([<=] xs ys (byLeft Pxs))
      | :: _ xs, byRight Pys => there ([<=] xs ys (byRight Pys))
  }

\func in-list-++-= {A : \Type} (a : A) (xs ys : List A) : a ∈ (xs ++ ys) = a ∈ xs || a ∈ ys => Any-++-= xs ys

{-Agda-
-- Your code goes here
-Agda-}

-- (!) We have already proven a more general case (equality) because our All is a proposition.

{-Agda-
-- Your code goes here
-Agda-}

\import Logic.Meta (contradiction)

\func ~Any=All~ {A : \Type} {P : A -> \Prop} (xs : List A) : (~ o Any P) xs = All (~ o P) xs =>
  propExt ([=>] xs) ([<=] xs)
  \where {
    \func [=>] {A : \Type} {P : A -> \Prop} (xs : List A) (not-any : ~ (Any P xs)) : All (~ o P) xs \elim xs
      | [] => []∃
      | :: x xs => (\lam Px => not-any (here Px)) ::∀ ([=>] xs (\lam Pxs => not-any (there Pxs)))

    \func [<=] {A : \Type} {P : A -> \Prop} (xs : List A) (all-not : All (~ o P) xs) : ~ (Any P xs)
      | [], []∃ => contradiction
      | :: x xs, ::∀ ~Px all-not => \lam any => \case any \with {
        | here Px => ~Px Px
        | there any => [<=] xs all-not any
      }
  }