{-Agda-
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_; refl)
open Eq.≡-Reasoning
open import Data.Nat using (ℕ; zero; suc)
open import Data.Product using (_×_) renaming (_,_ to ⟨_,_⟩)
open import Data.Sum using (_⊎_; inj₁; inj₂)
open import Relation.Nullary using (¬_)
open import Relation.Nullary.Negation using ()
  renaming (contradiction to ¬¬-intro)
open import Data.Unit using (⊤; tt)
open import Data.Empty using (⊥; ⊥-elim)
open import plfa.part1.Relations using (_<_; z<s; s<s)
open import plfa.part1.Isomorphism using (_⇔_)
-Agda-}

\import Paths (==<, >==, qed)
\import util.Paths (=<>=)
\import util.Logic (&&)
\import Logic (||, byLeft, byRight)
\import util.Logic (~)
\import part1.Negation (Not-Not-intro)
\import part1.Connectives (T \as Unit, tt)
\import Logic (Empty, absurd)
\import part1.Relations (<, z<s, s<s)
\import part1.Isomorphism (<=>)

{-Agda-
infix 4 _≤_

data _≤_ : ℕ → ℕ → Set where

  z≤n : ∀ {n : ℕ}
      --------
    → zero ≤ n

  s≤s : ∀ {m n : ℕ}
    → m ≤ n
      -------------
    → suc m ≤ suc n
-Agda-}

\data \infix 4 <= Nat Nat \with
  | 0, _ => z<=n
  | suc m, suc n => s<=s (m <= n)

{-Agda-
2≤4 : 2 ≤ 4
2≤4 = s≤s (s≤s z≤n)

¬4≤2 : ¬ (4 ≤ 2)
¬4≤2 (s≤s (s≤s ()))
-Agda-}

\func [2<=4] : 2 <= 4 => s<=s (s<=s z<=n)

\func ~[4<=2] : ~ (4 <= 2) => \lam [4<=2] => \case [4<=2] \with {
  | s<=s (s<=s ())
}

{-Agda-
data Bool : Set where
  true  : Bool
  false : Bool
-Agda-}

\data Bool | true | false

{-Agda-
infix 4 _≤ᵇ_

_≤ᵇ_ : ℕ → ℕ → Bool
zero ≤ᵇ n       =  true
suc m ≤ᵇ zero   =  false
suc m ≤ᵇ suc n  =  m ≤ᵇ n
-Agda-}

\func \infix 4 <=b (m n : Nat) : Bool
  | 0, n => true
  | suc m, 0 => false
  | suc m, suc n => m <=b n

{-Agda-
_ : (2 ≤ᵇ 4) ≡ true
_ =
  begin
    2 ≤ᵇ 4
  ≡⟨⟩
    1 ≤ᵇ 3
  ≡⟨⟩
    0 ≤ᵇ 2
  ≡⟨⟩
    true
  ∎

_ : (4 ≤ᵇ 2) ≡ false
_ =
  begin
    4 ≤ᵇ 2
  ≡⟨⟩
    3 ≤ᵇ 1
  ≡⟨⟩
    2 ≤ᵇ 0
  ≡⟨⟩
    false
  ∎
-Agda-}

\func [2<=b4] : (2 <=b 4) = true =>
  2 <=b 4 =<>=
  1 <=b 3 =<>=
  0 <=b 2 =<>=
  true `qed

\func ~[4<=b2] : (4 <=b 2) = false =>
  4 <=b 2 =<>=
  3 <=b 1 =<>=
  2 <=b 0 =<>=
  false `qed

{-Agda-
T : Bool → Set
T true   =  ⊤
T false  =  ⊥
-Agda-}

\func T (b : Bool) : \Type
  | true => Unit
  | false => Empty

{-Agda-
T→≡ : ∀ (b : Bool) → T b → b ≡ true
T→≡ true tt   =  refl
T→≡ false ()
-Agda-}

\func T->= (b : Bool) (t : T b) : b = true
  | true, tt => idp

{-Agda-
≡→T : ∀ {b : Bool} → b ≡ true → T b
≡→T refl  =  tt
-Agda-}

\func =->T {b : Bool} (p : b = true) : T b \elim p
  | idp => tt

{-Agda-
≤ᵇ→≤ : ∀ (m n : ℕ) → T (m ≤ᵇ n) → m ≤ n
≤ᵇ→≤ zero    n       tt  =  z≤n
≤ᵇ→≤ (suc m) zero    ()
≤ᵇ→≤ (suc m) (suc n) t   =  s≤s (≤ᵇ→≤ m n t)
-Agda-}

\func leq-b->leq \alias ≤b->≤ (m n : Nat) (_ : T (m <=b n)) : m <= n
  | 0, n, tt => z<=n
  | suc m, suc n, t => s<=s (≤b->≤ m n t)

{-Agda-
≤→≤ᵇ : ∀ {m n : ℕ} → m ≤ n → T (m ≤ᵇ n)
≤→≤ᵇ z≤n        =  tt
≤→≤ᵇ (s≤s m≤n)  =  ≤→≤ᵇ m≤n
-Agda-}

\func leq->leq-b \alias ≤->≤b {m n : Nat} (_ : m <= n) : T (m <=b n)
  | {0}, z<=n => tt
  | {suc m}, {suc n}, s<=s m<=n => ≤->≤b m<=n

{-Agda-
data Dec (A : Set) : Set where
  yes :   A → Dec A
  no  : ¬ A → Dec A
-Agda-}

\data Dec (A : \Type)
  | yes A
  | no (~ A)

{-Agda-
¬s≤z : ∀ {m : ℕ} → ¬ (suc m ≤ zero)
¬s≤z ()

¬s≤s : ∀ {m n : ℕ} → ¬ (m ≤ n) → ¬ (suc m ≤ suc n)
¬s≤s ¬m≤n (s≤s m≤n) = ¬m≤n m≤n
-Agda-}

\func ~s<=z {m : Nat} : ~ (suc m <= zero) => \case __ \with {}

\func ~s<=s {m n : Nat} (~m<=n : ~ (m <= n)) : ~ (suc m <= suc n) => \lam sm<=sn => \case sm<=sn \with {
  | s<=s m<=n => ~m<=n m<=n
}

{-Agda-
_≤?_ : ∀ (m n : ℕ) → Dec (m ≤ n)
zero  ≤? n                   =  yes z≤n
suc m ≤? zero                =  no ¬s≤z
suc m ≤? suc n with m ≤? n
...               | yes m≤n  =  yes (s≤s m≤n)
...               | no ¬m≤n  =  no (¬s≤s ¬m≤n)
-Agda-}

\func \infix 4 <=? (m n : Nat) : Dec (m <= n)
  | 0, n => yes z<=n
  | suc m, 0 => no ~s<=z
  | suc m, suc n => \case m <=? n \with {
    | yes m<=n => yes (s<=s m<=n)
    | no ~m<=n => no (~s<=s ~m<=n)
  }

{-Agda-
_ : 2 ≤? 4 ≡ yes (s≤s (s≤s z≤n))
_ = refl

_ : 4 ≤? 2 ≡ no (¬s≤s (¬s≤s ¬s≤z))
_ = refl
-Agda-}

\func [2<=?4] : 2 <=? 4 = yes (s<=s (s<=s z<=n)) => idp

\func [4<=?2] : 4 <=? 2 = no (~s<=s (~s<=s ~s<=z)) => idp

{-Agda-
-- Your code goes here
-Agda-}

\import part1.Relations (<, z<s, s<s)
\import Logic.Meta (contradiction)

\func \infix 4 <? (m n : Nat) : Dec (m < n)
  | 0, 0 => no contradiction
  | 0, suc n => yes z<s
  | suc m, 0 => no contradiction
  | suc m, suc n => \case m <? n \with {
    | yes m<n => yes (s<s m<n)
    | no ~m<n => no (\lam sm<sn => \case sm<sn \with {
      | s<s m<n => ~m<n m<n
    })
  }

{-Agda-
-- Your code goes here
-Agda-}

\import Paths (pmap)
\import Arith.Nat (pred)

\func \infix 4 =N? (m n : Nat) : Dec (m = n)
  | 0, 0 => yes idp
  | 0, suc n => no contradiction
  | suc m, 0 => no contradiction
  | suc m, suc n => \case m =N? n \with {
    | yes m=n => yes (pmap suc m=n)
    | no m/=n => no (\lam sm=sn => m/=n (pmap pred sm=sn))
  }

{-Agda-
_≤?′_ : ∀ (m n : ℕ) → Dec (m ≤ n)
m ≤?′ n with m ≤ᵇ n | ≤ᵇ→≤ m n | ≤→≤ᵇ {m} {n}
...        | true   | p        | _            = yes (p tt)
...        | false  | _        | ¬p           = no ¬p
-Agda-}

\import Meta (cases)

\func \infix 4 <=?' (m n : Nat) : Dec (m <= n) => cases (m <=b n, ≤b->≤ m n, ≤->≤b {m} {n}) \with {
  | true, p, _ => yes (p tt)
  | false, _, ~p => no ~p
}

{-Agda-
⌊_⌋ : ∀ {A : Set} → Dec A → Bool
⌊ yes x ⌋  =  true
⌊ no ¬x ⌋  =  false
-Agda-}

\func toBool {A : \Type} (d : Dec A) : Bool
  | yes x => true
  | no ~x => false

{-Agda-
_≤ᵇ′_ : ℕ → ℕ → Bool
m ≤ᵇ′ n  =  ⌊ m ≤? n ⌋
-Agda-}

\func \infix 4 <=b' (m n : Nat) : Bool => toBool (m <=? n)

{-Agda-
toWitness : ∀ {A : Set} {D : Dec A} → T ⌊ D ⌋ → A
toWitness {A} {yes x} tt  =  x
toWitness {A} {no ¬x} ()

fromWitness : ∀ {A : Set} {D : Dec A} → A → T ⌊ D ⌋
fromWitness {A} {yes x} _  =  tt
fromWitness {A} {no ¬x} x  =  ¬x x
-Agda-}

\func toWitness {A : \Type} {D : Dec A} (td : T (toBool D)) : A
  | {A}, {yes x}, tt => x

\func fromWitness {A : \Type} {D : Dec A} (x : A) : T (toBool D)
  | {A}, {yes x}, _ => tt
  | {A}, {no ~x}, x => ~x x

{-Agda-
≤ᵇ′→≤ : ∀ {m n : ℕ} → T (m ≤ᵇ′ n) → m ≤ n
≤ᵇ′→≤  =  toWitness

≤→≤ᵇ′ : ∀ {m n : ℕ} → m ≤ n → T (m ≤ᵇ′ n)
≤→≤ᵇ′  =  fromWitness
-Agda-}

\func leq-b->leq' \alias ≤b->≤' {m n : Nat} (td : T (m <=b' n)) : m <= n => toWitness td

\func leq->leq-b' \alias ≤->≤b' {m n : Nat} (p : m <= n) : T (m <=b' n) => fromWitness p

{-Agda-
infixr 6 _∧_

_∧_ : Bool → Bool → Bool
true  ∧ true  = true
false ∧ _     = false
_     ∧ false = false
-Agda-}

\func \infixr 6 ^ (_ _ : Bool) : Bool
  | true, true => true
  | false, _ => false
  | _, false => false

{-Agda-
infixr 6 _×-dec_

_×-dec_ : ∀ {A B : Set} → Dec A → Dec B → Dec (A × B)
yes x ×-dec yes y = yes ⟨ x , y ⟩
no ¬x ×-dec _     = no λ{ ⟨ x , y ⟩ → ¬x x }
_     ×-dec no ¬y = no λ{ ⟨ x , y ⟩ → ¬y y }
-Agda-}

\func \infixr 6 &&-dec {A B : \Prop} (da : Dec A) (db : Dec B) : Dec (A && B)
  | yes x, yes y => yes (&&.prod x y)
  | no ~x, _ => no (\lam a&&b => ~x (&&.proj1 a&&b))
  | _, no ~y => no (\lam a&&b => ~y (&&.proj2 a&&b))

{-Agda-
infixr 5 _∨_

_∨_ : Bool → Bool → Bool
true  ∨ _      = true
_     ∨ true   = true
false ∨ false  = false
-Agda-}

\func \infixr 5 or \alias \infixr 5 ∨ (_ _ : Bool) : Bool
  | true, _ => true
  | _, true => true
  | false, false => false

{-Agda-
infixr 5 _⊎-dec_

_⊎-dec_ : ∀ {A B : Set} → Dec A → Dec B → Dec (A ⊎ B)
yes x ⊎-dec _     = yes (inj₁ x)
_     ⊎-dec yes y = yes (inj₂ y)
no ¬x ⊎-dec no ¬y = no λ{ (inj₁ x) → ¬x x ; (inj₂ y) → ¬y y }
-Agda-}

\func \infixr 5 ||-dec {A B : \Prop} (da : Dec A) (db : Dec B) : Dec (A || B)
  | yes x, _ => yes (byLeft x)
  | _, yes y => yes (byRight y)
  | no ~x, no ~y => no (\lam a||b => \case a||b \with {
    | byLeft x => ~x x
    | byRight y => ~y y
  })

{-Agda-
not : Bool → Bool
not true  = false
not false = true
-Agda-}

\func not (_ : Bool) : Bool
  | true => false
  | false => true

{-Agda-
¬? : ∀ {A : Set} → Dec A → Dec (¬ A)
¬? (yes x)  =  no (¬¬-intro x)
¬? (no ¬x)  =  yes ¬x
-Agda-}

\func ~? {A : \Type} (d : Dec A) : Dec (~ A)
  | yes x => no (Not-Not-intro x)
  | no ~x => yes ~x

{-Agda-
_⊃_ : Bool → Bool → Bool
_     ⊃ true   =  true
false ⊃ _      =  true
true  ⊃ false  =  false
-Agda-}

\func implication \alias ⊃ (_ _ : Bool) : Bool
  | _, true => true
  | false, _ => true
  | true, false => false

{-Agda-
_→-dec_ : ∀ {A B : Set} → Dec A → Dec B → Dec (A → B)
_     →-dec yes y  =  yes (λ _ → y)
no ¬x →-dec _      =  yes (λ x → ⊥-elim (¬x x))
yes x →-dec no ¬y  =  no (λ f → ¬y (f x))
-Agda-}

\func ->-dec {A B : \Type} (_ : Dec A) (_ : Dec B) : Dec (A -> B)
  | _, yes y => yes (\lam _ => y)
  | no ~x, _ => yes (\lam x => absurd (~x x))
  | yes x, no ~y => no (\lam a->b => ~y (a->b x))

{-Agda-
postulate
  ∧-× : ∀ {A B : Set} (x : Dec A) (y : Dec B) → ⌊ x ⌋ ∧ ⌊ y ⌋ ≡ ⌊ x ×-dec y ⌋
  ∨-⊎ : ∀ {A B : Set} (x : Dec A) (y : Dec B) → ⌊ x ⌋ ∨ ⌊ y ⌋ ≡ ⌊ x ⊎-dec y ⌋
  not-¬ : ∀ {A : Set} (x : Dec A) → not ⌊ x ⌋ ≡ ⌊ ¬? x ⌋
-Agda-}

\func ^-&& {A B : \Prop} (x : Dec A) (y : Dec B) : (toBool x) ^ (toBool y) = toBool (x &&-dec y)
  | yes _, yes _ => idp
  | yes _, no _ => idp
  | no _, yes _ => idp
  | no _, no _ => idp

\func or-|| \alias ∨-|| {A B : \Prop} (x : Dec A) (y : Dec B) : (toBool x) ∨ (toBool y) = toBool (x ||-dec y)
  | yes _, yes _ => idp
  | yes _, no _ => idp
  | no _, yes _ => idp
  | no _, no _ => idp

\func not-~ {A : \Type} (x : Dec A) : not (toBool x) = toBool (~? x)
  | yes _ => idp
  | no _ => idp

{-Agda-
minus : (m n : ℕ) (n≤m : n ≤ m) → ℕ
minus m       zero    _         = m
minus (suc m) (suc n) (s≤s n≤m) = minus m n n≤m
-Agda-}

\func minus (m n : Nat) (n<=m : n <= m) : Nat
  | m, 0, _ => m
  | suc m, suc n, s<=s n<=m => minus m n n<=m

{-Agda-
_ : minus 5 3 (s≤s (s≤s (s≤s z≤n))) ≡ 2
_ = refl
-Agda-}

\func [5-3] : minus 5 3 (s<=s (s<=s (s<=s z<=n))) = 2 => idp

{-Agda-
_-_ : (m n : ℕ) {n≤m : T ⌊ n ≤? m ⌋} → ℕ
_-_ m n {n≤m} = minus m n (toWitness n≤m)
-Agda-}

\func \infix 6 - (m n : Nat) {n<=m : T (toBool (n <=? m))} => minus m n (toWitness n<=m)

{-Agda-
_ : 5 - 3 ≡ 2
_ = refl
-Agda-}

-- TODO doesn't work, Arend cannot infer the implicit argument
-- Will be partially available in Arend 1.8
-- \func [5-3]' : (5 - 3) = 2 => idp

{-Agda-
True : ∀ {Q} → Dec Q → Set
True Q = T ⌊ Q ⌋
-Agda-}

-- TODO

{-Agda-
import Data.Bool.Base using (Bool; true; false; T; _∧_; _∨_; not)
import Data.Nat using (_≤?_)
import Relation.Nullary using (Dec; yes; no)
import Relation.Nullary.Decidable using (⌊_⌋; True; toWitness; fromWitness)
import Relation.Nullary.Negation using (¬?)
import Relation.Nullary.Product using (_×-dec_)
import Relation.Nullary.Sum using (_⊎-dec_)
import Relation.Binary using (Decidable)
-Agda-}

\import Data.Bool (Bool, true, false, So, and, or, not)
\import Set (Dec, yes, no, decToBool)