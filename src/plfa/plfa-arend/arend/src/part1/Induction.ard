{-Agda
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_; refl; cong; sym)
open Eq.≡-Reasoning using (begin_; _≡⟨⟩_; step-≡; _∎)
open import Data.Nat using (ℕ; zero; suc; _+_; _*_; _∸_)
Agda-}

\import Paths (pmap, inv)
\import util.Paths (=<>=)
\import Paths (==<, >==, qed)
\open Nat (+, *)
\import Arith.Nat (-')

{-Agda
_ : (3 + 4) + 5 ≡ 3 + (4 + 5)
_ =
  begin
    (3 + 4) + 5
  ≡⟨⟩
    7 + 5
  ≡⟨⟩
    12
  ≡⟨⟩
    3 + 9
  ≡⟨⟩
    3 + (4 + 5)
  ∎
Agda-}

\func assoc-example : (3 + 4) + 5 = 3 + (4 + 5) =>
  (3 + 4) + 5 =<>=
  7 + 5 =<>=
  12 =<>=
  3 + 9 =<>=
  3 + (4 + 5) `qed

{-Agda
+-assoc : ∀ (m n p : ℕ) → (m + n) + p ≡ m + (n + p)
+-assoc zero n p =
  begin
    (zero + n) + p
  ≡⟨⟩
    n + p
  ≡⟨⟩
    zero + (n + p)
  ∎
+-assoc (suc m) n p =
  begin
    (suc m + n) + p
  ≡⟨⟩
    suc (m + n) + p
  ≡⟨⟩
    suc ((m + n) + p)
  ≡⟨ cong suc (+-assoc m n p) ⟩
    suc (m + (n + p))
  ≡⟨⟩
    suc m + (n + p)
  ∎
Agda-}

-- In constract to Agda, '+' in Arend is defined by eliminating the second parameter.
-- This is why we eliminate 'p' here, not 'm'.

\func +-assoc (m n p : Nat) : (m + n) + p = m + (n + p) \elim p
  | 0 =>
    (m + n) + 0 =<>=
    m + n =<>=
    m + (n + 0) `qed
  | suc p =>
    (m + n) + suc p =<>=
    suc ((m + n) + p) ==< pmap suc (+-assoc m n p) >==
    suc (m + (n + p)) =<>=
    m + suc (n + p) =<>=
    m + (n + suc p) `qed

{-Agda
+-assoc-2 : ∀ (n p : ℕ) → (2 + n) + p ≡ 2 + (n + p)
+-assoc-2 n p =
  begin
    (2 + n) + p
  ≡⟨⟩
    suc (1 + n) + p
  ≡⟨⟩
    suc ((1 + n) + p)
  ≡⟨ cong suc (+-assoc-1 n p) ⟩
    suc (1 + (n + p))
  ≡⟨⟩
    2 + (n + p)
  ∎
  where
  +-assoc-1 : ∀ (n p : ℕ) → (1 + n) + p ≡ 1 + (n + p)
  +-assoc-1 n p =
    begin
      (1 + n) + p
    ≡⟨⟩
      suc (0 + n) + p
    ≡⟨⟩
      suc ((0 + n) + p)
    ≡⟨ cong suc (+-assoc-0 n p) ⟩
      suc (0 + (n + p))
    ≡⟨⟩
      1 + (n + p)
    ∎
    where
    +-assoc-0 : ∀ (n p : ℕ) → (0 + n) + p ≡ 0 + (n + p)
    +-assoc-0 n p =
      begin
        (0 + n) + p
      ≡⟨⟩
        n + p
      ≡⟨⟩
        0 + (n + p)
      ∎
Agda-}

\func +-assoc-2 (m n : Nat) : (m + n) + 2 = m + (n + 2) =>
  (m + n) + 2 =<>=
  suc ((m + n) + 1) ==< pmap suc (+-assoc-1 m n) >==
  suc (m + (n + 1)) =<>=
  m + suc (n + 1) =<>=
  m + (n + 2) `qed
  \where {
    \func +-assoc-1 (m n : Nat) : (m + n) + 1 = m + (n + 1) =>
      (m + n) + 1 =<>=
      suc ((m + n) + 0) ==< pmap suc (+-assoc-0 m n) >==
      suc (m + (n + 0)) =<>=
      m + suc (n + 0) =<>=
      m + (n + 1) `qed

    \func +-assoc-0 (m n : Nat) : (m + n) + 0 = m + (n + 0) =>
      (m + n) + 0 =<>=
      m + n =<>=
      m + (n + 0) `qed
  }

{-Agda
+-identityʳ : ∀ (m : ℕ) → m + zero ≡ m
+-identityʳ zero =
  begin
    zero + zero
  ≡⟨⟩
    zero
  ∎
+-identityʳ (suc m) =
  begin
    suc m + zero
  ≡⟨⟩
    suc (m + zero)
  ≡⟨ cong suc (+-identityʳ m) ⟩
    suc m
  ∎
Agda-}

-- We prove left idenitity as '+' is defined by eliminating the second parameter, right identity is trivial for it.

\func +-identity-left (m : Nat) : 0 + m = m
  | 0 => 0 + 0 =<>= 0 `qed
  | suc m =>
    0 + suc m =<>=
    suc (0 + m) ==< pmap suc (+-identity-left m) >==
    suc m `qed

-- TODO Does it mean Arend's type checker is "smarter" than Agda's one?

\func +-identity-left' (m : Nat) : 0 + m = m => idp

{-Agda
+-suc : ∀ (m n : ℕ) → m + suc n ≡ suc (m + n)
+-suc zero n =
  begin
    zero + suc n
  ≡⟨⟩
    suc n
  ≡⟨⟩
    suc (zero + n)
  ∎
+-suc (suc m) n =
  begin
    suc m + suc n
  ≡⟨⟩
    suc (m + suc n)
  ≡⟨ cong suc (+-suc m n) ⟩
    suc (suc (m + n))
  ≡⟨⟩
    suc (suc m + n)
  ∎
Agda-}

\func +-suc (m n : Nat) : suc m + n = suc (m + n) \elim n
  | 0 =>
    suc m + 0 =<>=
    suc m =<>=
    suc (m + 0) `qed
  | suc n =>
    suc m + suc n =<>=
    suc (suc m + n) ==< pmap suc (+-suc m n) >==
    suc (suc (m + n)) =<>=
    suc (m + suc n) `qed

\func +-suc' (m n : Nat) : suc m + n = suc (m + n) => idp

{-Agda
+-comm : ∀ (m n : ℕ) → m + n ≡ n + m
+-comm m zero =
  begin
    m + zero
  ≡⟨ +-identityʳ m ⟩
    m
  ≡⟨⟩
    zero + m
  ∎
+-comm m (suc n) =
  begin
    m + suc n
  ≡⟨ +-suc m n ⟩
    suc (m + n)
  ≡⟨ cong suc (+-comm m n) ⟩
    suc (n + m)
  ≡⟨⟩
    suc n + m
  ∎
Agda-}

\func +-comm (m n : Nat) : m + n = n + m \elim m
  | 0 =>
    0 + n ==< +-identity-left n >==
    n =<>=
    n + 0 `qed
  | suc m =>
    suc m + n ==< +-suc m n >==
    suc (m + n) ==< pmap suc (+-comm m n) >==
    suc (n + m) =<>=
    n + suc m `qed

\func +-comm' (m n : Nat) : m + n = n + m \elim m
  | 0 =>
    0 + n =<>=
    n =<>=
    n + 0 `qed
  | suc m =>
    suc m + n =<>=
    suc (m + n) ==< pmap suc (+-comm m n) >==
    suc (n + m) =<>=
    n + suc m `qed

{-Agda
+-rearrange : ∀ (m n p q : ℕ) → (m + n) + (p + q) ≡ m + (n + p) + q
+-rearrange m n p q =
  begin
    (m + n) + (p + q)
  ≡⟨ +-assoc m n (p + q) ⟩
    m + (n + (p + q))
  ≡⟨ cong (m +_) (sym (+-assoc n p q)) ⟩
    m + ((n + p) + q)
  ≡⟨ sym (+-assoc m (n + p) q) ⟩
    (m + (n + p)) + q
  ∎
Agda-}

\func +-rearrange (m n p q : Nat) : (m + n) + (p + q) = m + (n + p) + q =>
  (m + n) + (p + q) ==< +-assoc m n (p + q) >==
  m + (n + (p + q)) ==< pmap (m +) (inv (+-assoc n p q)) >==
  m + ((n + p) + q) ==< inv (+-assoc m (n + p) q) >==
  (m + (n + p)) + q `qed

{-Agda
-- Your code goes here
Agda-}

-- TODO

{-Agda
+-assoc′ : ∀ (m n p : ℕ) → (m + n) + p ≡ m + (n + p)
+-assoc′ zero    n p                          =  refl
+-assoc′ (suc m) n p  rewrite +-assoc′ m n p  =  refl
Agda-}

\import Paths.Meta (rewrite)
\import Function.Meta ($)

\func +-assoc' (m n p : Nat) : (m + n) + p = m + (n + p) \elim p
  | 0 => idp
  | suc p => rewrite (+-assoc' m n p) idp

{-Agda
+-identity′ : ∀ (n : ℕ) → n + zero ≡ n
+-identity′ zero = refl
+-identity′ (suc n) rewrite +-identity′ n = refl

+-suc′ : ∀ (m n : ℕ) → m + suc n ≡ suc (m + n)
+-suc′ zero n = refl
+-suc′ (suc m) n rewrite +-suc′ m n = refl

+-comm′ : ∀ (m n : ℕ) → m + n ≡ n + m
+-comm′ m zero rewrite +-identity′ m = refl
+-comm′ m (suc n) rewrite +-suc′ m n | +-comm′ m n = refl
Agda-}

\func +-identity-left'' (n : Nat) : 0 + n = n \elim n
  | 0 => idp
  | suc n => rewrite (+-identity-left'' n) idp

\func +-suc'' (m n : Nat) : m + suc n = suc (m + n) \elim n
  | 0 => idp
  | suc n => rewrite (+-suc'' m n) idp

\func +-comm'' (m n : Nat) : m + n = n + m \elim m
  | 0 => rewrite (+-identity-left'' n) idp
  | suc m => rewrite (+-suc'' m n) $ rewrite (+-comm'' m n) idp

\func +-comm''' (m n : Nat) : m + n = n + m \elim m
  | 0 => idp
  | suc m => rewrite (+-comm'' m n) idp

{-Agda
-- Your code goes here
Agda-}

\func +-swap (m n p : Nat) : m + (n + p) = n + (m + p) =>
  m + (n + p) ==< (inv $ +-assoc m n p) >==
  (m + n) + p ==< (pmap (`+ p) $ +-comm m n) >==
  (n + m) + p ==< +-assoc n m p >==
  n + (m + p) `qed

{-Agda
-- Your code goes here
Agda-}

\func *-distrib-+ (m n p : Nat) : p * (m + n) = p * m + p * n \elim n
  | 0 => idp
  | suc n =>
    p * (m + n) + p ==< pmap (`+ p) (*-distrib-+ m n p) >==
    p * m + p * n + p ==< +-assoc (p * m) (p * n) p >==
    p * m + (p * n + p) `qed

{-Agda
-- Your code goes here
Agda-}

\func *-assoc (m n p : Nat) : (m * n) * p = m * (n * p) \elim p
  | 0 => idp
  | suc p => rewrite (*-distrib-+ (n * p) n m) $ rewrite (*-assoc m n p) idp

{-Agda
-- Your code goes here
Agda-}

\func *-comm (m n : Nat) : m * n = n * m
  | 0, n => *-left-0 n
  | suc m, 0 => inv $ *-left-0 m
  | suc m, suc n =>
    pmap suc (
      suc m * n + m  ==< pmap (`+ m) (*-comm (suc m) n) >==
      n * m + n + m ==< pmap (\lam x => x + n + m) (inv $ *-comm m n) >==
      m * n + n + m ==< +-assoc (m * n) n m >==
      m * n + (n + m) ==< pmap (m * n +) (+-comm n m) >==
      m * n + (m + n) ==< (inv $ +-assoc (m * n) m n) >==
      m * n + m + n ==< pmap (`+ n) (*-comm m (suc n)) >==
      suc n * m + n `qed
    )
  \where {
    \func *-left-0 (n : Nat) : 0 * n = 0
      | 0 => idp
      | suc n => *-left-0 n
  }