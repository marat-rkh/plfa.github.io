{-Agda
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_; refl; cong; cong-app)
open Eq.≡-Reasoning
open import Data.Nat using (ℕ; zero; suc; _+_)
open import Data.Nat.Properties using (+-comm)
Agda-}

\import Paths (pmap, ==<, >==, qed)
\import util.Paths (=<>=)
\open Nat (+)
\import Arith.Nat (NatSemiring)
\open NatSemiring (+-comm)

{-Agda
_∘_ : ∀ {A B C : Set} → (B → C) → (A → B) → (A → C)
(g ∘ f) x  = g (f x)
Agda-}

\func \infixr 8 o {A B C : \Type} (g : B -> C) (f : A -> B) (x : A) : C =>
  g (f x)

\func \infixr 8 o' {A B C : \Type} (g : B -> C) (f : A -> B) : A -> C =>
  \lam x => g (f x)

{-Agda
postulate
  extensionality : ∀ {A B : Set} {f g : A → B}
    → (∀ (x : A) → f x ≡ g x)
      -----------------------
    → f ≡ g
Agda-}

-- (!) In Arend, we can prove functional extensionality. Informally, it works like this:
-- 1. `=` is a special case of a type `Path` that has a `path` constructor.
-- `=` can be viewed as a path between values considered equal.
-- 2. `path` accepts a function from a special type `I` to the type of values considered equal.
-- In our case this is `I -> (A -> B)`. The type `I` is an interval that has `left` and `right` contructors.
-- When we prove equality, we need to provide a function that computes to `f` on the `left`,
-- and to `g` on the `right`.
-- 3. Operator `@` computes a path on `I`. For `f x = g x` it computes to `f x` on the `left`,
-- and to `g x` on the `right`. As a result, `\lam x => (eq x) @ i` is `\lam x => f x` on the `left`,
-- and `\lam x => g x` on the `right`.

\func extensionality {A B : \Type} {f g : A -> B} (eq : \Pi (x : A) -> f x = g x) : f = g =>
  path (\lam i => \lam x => (eq x) @ i)

{-Agda
_+′_ : ℕ → ℕ → ℕ
m +′ zero  = m
m +′ suc n = suc (m +′ n)
Agda-}

-- Builtin `+` is defined by eliminatng the second parameter, so we eliminate the first here.

\func \infixl 6 +' (m n : Nat) : Nat \elim m
  | 0 => n
  | suc m => suc (m +' n)

{-Agda
same-app : ∀ (m n : ℕ) → m +′ n ≡ m + n
same-app m n rewrite +-comm m n = helper m n
  where
  helper : ∀ (m n : ℕ) → m +′ n ≡ n + m
  helper m zero    = refl
  helper m (suc n) = cong suc (helper m n)
Agda-}

\import Paths.Meta (rewrite)

\func same-app (m n : Nat) : m +' n = m + n => rewrite +-comm (helper m n)
  \where {
    \func helper (m n : Nat) : m +' n = n + m \elim m
      | 0 => idp
      | suc m => pmap suc (helper m n)
  }

{-Agda
same : _+′_ ≡ _+_
same = extensionality (λ m → extensionality (λ n → same-app m n))
Agda-}

\func same : (+') = (+) => extensionality (\lam m => extensionality (\lam n => same-app m n))

{-Agda
postulate
  ∀-extensionality : ∀ {A : Set} {B : A → Set} {f g : ∀(x : A) → B x}
    → (∀ (x : A) → f x ≡ g x)
      -----------------------
    → f ≡ g
Agda-}

\func Pi-extensionality {A : \Type} {B : A -> \Type} {f g : \Pi (x : A) -> B x}
                        (eq : \Pi (x : A) -> f x = g x) : f = g =>
  path (\lam i => \lam x => (eq x) @ i)

{-Agda
infix 0 _≃_
record _≃_ (A B : Set) : Set where
  field
    to   : A → B
    from : B → A
    from∘to : ∀ (x : A) → from (to x) ≡ x
    to∘from : ∀ (y : B) → to (from y) ≡ y
open _≃_
Agda-}

\record \infix 1 =~ (A B : \Type) {
  | to : A -> B
  | from : B -> A
  | from-to : \Pi (x : A) -> from (to x) = x
  | to-from : \Pi (y : B) -> to (from y) = y
}

{-Agda
data _≃′_ (A B : Set): Set where
  mk-≃′ : ∀ (to : A → B) →
          ∀ (from : B → A) →
          ∀ (from∘to : (∀ (x : A) → from (to x) ≡ x)) →
          ∀ (to∘from : (∀ (y : B) → to (from y) ≡ y)) →
          A ≃′ B

to′ : ∀ {A B : Set} → (A ≃′ B) → (A → B)
to′ (mk-≃′ f g g∘f f∘g) = f

from′ : ∀ {A B : Set} → (A ≃′ B) → (B → A)
from′ (mk-≃′ f g g∘f f∘g) = g

from∘to′ : ∀ {A B : Set} → (A≃B : A ≃′ B) → (∀ (x : A) → from′ A≃B (to′ A≃B x) ≡ x)
from∘to′ (mk-≃′ f g g∘f f∘g) = g∘f

to∘from′ : ∀ {A B : Set} → (A≃B : A ≃′ B) → (∀ (y : B) → to′ A≃B (from′ A≃B y) ≡ y)
to∘from′ (mk-≃′ f g g∘f f∘g) = f∘g
Agda-}

-- TODO

{-Agda
≃-refl : ∀ {A : Set}
    -----
  → A ≃ A
≃-refl =
  record
    { to      = λ{x → x}
    ; from    = λ{y → y}
    ; from∘to = λ{x → refl}
    ; to∘from = λ{y → refl}
    }
Agda-}

\func =~-refl {A : \Type} : A =~ A \cowith
  | to x => x
  | from x => x
  | from-to x => idp
  | to-from x => idp

-- Alternative syntax with \new:

\func =~-refl' {A : \Type} : A =~ A => \new =~ {
  | to x => x
  | from x => x
  | from-to x => idp
  | to-from x => idp
}

{-Agda
≃-sym : ∀ {A B : Set}
  → A ≃ B
    -----
  → B ≃ A
≃-sym A≃B =
  record
    { to      = from A≃B
    ; from    = to   A≃B
    ; from∘to = to∘from A≃B
    ; to∘from = from∘to A≃B
    }
Agda-}

\func =~-sym {A B : \Type} (A=~B : A =~ B) : B =~ A \cowith
  | to => A=~B.from
  | from => A=~B.to
  | from-to => A=~B.to-from
  | to-from => A=~B.from-to

{-Agda
≃-trans : ∀ {A B C : Set}
  → A ≃ B
  → B ≃ C
    -----
  → A ≃ C
≃-trans A≃B B≃C =
  record
    { to       = to   B≃C ∘ to   A≃B
    ; from     = from A≃B ∘ from B≃C
    ; from∘to  = λ{x →
        begin
          (from A≃B ∘ from B≃C) ((to B≃C ∘ to A≃B) x)
        ≡⟨⟩
          from A≃B (from B≃C (to B≃C (to A≃B x)))
        ≡⟨ cong (from A≃B) (from∘to B≃C (to A≃B x)) ⟩
          from A≃B (to A≃B x)
        ≡⟨ from∘to A≃B x ⟩
          x
        ∎}
    ; to∘from = λ{y →
        begin
          (to B≃C ∘ to A≃B) ((from A≃B ∘ from B≃C) y)
        ≡⟨⟩
          to B≃C (to A≃B (from A≃B (from B≃C y)))
        ≡⟨ cong (to B≃C) (to∘from A≃B (from B≃C y)) ⟩
          to B≃C (from B≃C y)
        ≡⟨ to∘from B≃C y ⟩
          y
        ∎}
     }
Agda-}

\func =~-trans {A B C : \Type} (A=~B : A =~ B) (B=~C : B =~ C) : A =~ C \cowith
  | to => B=~C.to o A=~B.to
  | from => A=~B.from o B=~C.from
  | from-to x =>
    (A=~B.from o B=~C.from) ((B=~C.to o A=~B.to) x) =<>=
    A=~B.from (B=~C.from (B=~C.to (A=~B.to x))) ==< pmap A=~B.from (B=~C.from-to (A=~B.to x)) >==
    A=~B.from (A=~B.to x) ==< A=~B.from-to x >==
    x `qed
  | to-from x =>
    (B=~C.to o A=~B.to) ((A=~B.from o B=~C.from) x) =<>=
    B=~C.to (A=~B.to (A=~B.from (B=~C.from x))) ==< pmap B=~C.to (A=~B.to-from (B=~C.from x)) >==
    B=~C.to (B=~C.from x) ==< B=~C.to-from x >==
    x `qed